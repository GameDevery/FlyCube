#pragma once

#include <Program/Program.h>
#include <glm/glm.hpp>
#include <array>
#include <vector>
#include <memory>

class {{ShaderName}} : public ShaderBase
{
    ProgramApi& program_api;

public:

    static const ShaderType type = {{ShaderType}};

    struct
    {
{{#CBuffers}}        struct
        {
{{#Variables}}            {{&Type}} {{Name}};
{{/Variables}}        } {{BufferName}};
{{/CBuffers}}    } cbuffer;

    struct SRV
    {
        SRV(ProgramApi& program_api)
{{#Textures}}            {{Separator}} {{Name}}(program_api, type, "{{Name}}", {{Slot}})
{{/Textures}}        {
        }

{{#Textures}}       SRVBinding {{Name}};
{{/Textures}}    } srv;

    struct UAV
    {
        UAV(ProgramApi& program_api)
{{#UAVs}}            {{Separator}} {{Name}}(program_api, type, "{{Name}}", {{Slot}})
{{/UAVs}}        {
        }

{{#UAVs}}       UAVBinding {{Name}};
{{/UAVs}}    } uav;

    struct
    {
{{#Inputs}}        static constexpr const uint32_t {{Name}} = {{Slot}};
{{/Inputs}}    } ia;

    struct
    {
{{#Outputs}}        static constexpr const uint32_t {{Name}} = {{Slot}};
{{/Outputs}}    } om;

    struct Sampler
    {
        Sampler(ProgramApi& program_api)
{{#Samplers}}            {{Separator}} {{Name}}(program_api, type, {{Slot}})
{{/Samplers}}        {
        }

{{#Samplers}}       SamplerBinding {{Name}};
{{/Samplers}}    } sampler;

    {{ShaderName}}(ProgramApi& program_api)
        : ShaderBase("{{ShaderPath}}", "{{Entrypoint}}", "{{Target}}")
        , program_api(program_api)
        , cbuffer{}
        , srv(program_api)
        , uav(program_api)
        , sampler(program_api)
        , cbuffer_impl(program_api)
    {
    }

    virtual void UpdateShader() override
    {
        m_shader_buffer = CompileShader();
        program_api.OnCompileShader(type, m_shader_buffer);
    }

    virtual void UpdateCBuffers() override
    {
        {{#CBuffers}}cbuffer_impl.{{BufferName}}.UpdateCBuffer((const char*)&cbuffer.{{BufferName}}); 
        {{/CBuffers}}
    } 
 
private:
    virtual void BindCBuffers() override
    {
        {{#CBuffers}}program_api.AttachCBuffer(type, {{BufferIndex}}, cbuffer_impl.{{BufferName}}.GetBuffer());
        {{/CBuffers}}
    }
    
    class CBufferImpl
    {
    public:
        {{#CBuffers}}BufferLayout {{BufferName}};
        {{/CBuffers}}
        CBufferImpl(ProgramApi& program_api)
            {{#CBuffers}}{{BufferSeparator}} {{BufferName}}(
                program_api,
                "<{{BufferName}}>",
                {{BufferSize}},
                {{BufferIndex}},
                {
                    {{#Variables}}{{VariableSize}}, {{/Variables}}
                },
                {
                    {{#Variables}}offsetof(decltype(cbuffer.{{BufferName}}), {{Name}}), {{/Variables}}              
                },
                {
                    {{#Variables}}{{StartOffset}}, {{/Variables}}
                }
            )
            {{/CBuffers}}
        {
        }
    } cbuffer_impl;
};
